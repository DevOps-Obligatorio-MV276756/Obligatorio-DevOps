name: CI WorkFlow

on:
  workflow_call:

env:
  CALLEE_NAME: ${{ github.event.repository.name }}
  # CALLEE_BRANCH: ${{ github.event.repository.ref_name }}
  CALLEE_BRANCH2: ${{ github.event.pull_request.base.ref }}
  GH_TOKEN: ${{ github.token }}

jobs:
  # Modificado de https://github.com/SonarSource/sonarcloud-github-action-samples
  build_sonarcloud_testing:
    name: Buildear proyecto para test con sonarcloud
    runs-on: ubuntu-latest
    steps:
      # Muevo de v2 a v4
      - uses: actions/checkout@v4
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          # Usaba originalmente ver 11 pero la doc solicita ver 17 https://docs.sonarsource.com/sonarqube-cloud/advanced-setup/ci-based-analysis/sonarscanner-for-maven/
          java-version: 17
          distribution: 'temurin'
      # - name: Cache Maven packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  postman_testing:
    # https://afsalbacker.medium.com/a-simple-api-test-automation-setup-using-newman-github-actions-and-slack-f70cfa15efe3
    name: Test extra con postman
    needs: build_sonarcloud_testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
  
      - uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: "Install Newman"
        run: "npm install -g newman"
      - name: "Install Newman reporter"
        run: "npm install -g newman-reporter-htmlextra"
      
      - name: Building environment
        run: | 
          gh repo clone DevOps-Obligatorio-MV276756/obligatorio-be-orders
          mvn -f obligatorio-be-orders/ -B package
          java -jar obligatorio-be-orders/target/obligatorio-be-orders-0.0.1-SNAPSHOT-spring-boot.jar http://localhost:8001 http://localhost:8003 http://localhost:8002 --server.port=8000 &
          gh repo clone DevOps-Obligatorio-MV276756/obligatorio-be-payments
          mvn -f obligatorio-be-payments/ -B package
          java -jar obligatorio-be-payments/target/obligatorio-be-payments-0.0.1-SNAPSHOT-spring-boot.jar --server.port=8001 &
          gh repo clone DevOps-Obligatorio-MV276756/obligatorio-be-products
          mvn -f obligatorio-be-products/ -B package
          java -jar obligatorio-be-products/target/obligatorio-be-products-0.0.1-SNAPSHOT-spring-boot.jar --server.port=8002 &
          gh repo clone DevOps-Obligatorio-MV276756/obligatorio-be-shipping
          mvn -f obligatorio-be-shipping/ -B package
          java -jar obligatorio-be-shipping/target/obligatorio-be-shipping-0.0.1-SNAPSHOT-spring-boot.jar --server.port=8003 &
      
      - name: Obtener Postman collection a travez de GitHub REST API 
        run: |
          curl \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H 'Accept: application/vnd.github.v3.raw' \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -O \
          -L 'https://api.github.com/repos/DevOps-Obligatorio-MV276756/Obligatorio-DevOps/contents/postman/obligatorio-devops.postman_collection.json'
      
      - name: "Run tests"
        run: "newman run obligatorio-devops.postman_collection.json -r htmlextra --reporter-htmlextra-export htmlreport.html --reporter-htmlextra-darkTheme"
      - name: "Output report"
        run: |
          ls -l runreport1.html
      - name: "Publish report"
        uses: MeilCli/slack-upload-file@v4
        with:
          slack_token: ${{ secrets.SLACK_TOKEN }}
          channel_id: 'C0846DR504B'
          file_path: 'htmlreport.html'
          initial_comment: 'Post by slack-upload-file'
          if_no_files_found: warn
      
  package_artifact:
    name: Empaquetar proyecto y subirlo como artefacto
    needs: postman_testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Package
        run: |
          mvn clean
          mvn package
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CALLEE_NAME }}-${{ env.CALLEE_BRANCH2 }}
          path: target/${{ env.CALLEE_NAME }}-0.0.1-SNAPSHOT-spring-boot.jar

  build_docker_image_target_ecr:
    name: Crear imagen de docker y hacer push a AWS ECR
    needs: package_artifact
    runs-on: ubuntu-latest
    steps:
      - name: Obtener Dockerfile a travez de GitHub REST API 
        run: |
          curl \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H 'Accept: application/vnd.github.v3.raw' \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -O \
          -L 'https://api.github.com/repos/DevOps-Obligatorio-MV276756/Obligatorio-DevOps/contents/dockerfiles/dockerfile_jar'
      - name: Descargar artefacto del MS empaquetado
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CALLEE_NAME }}-${{ env.CALLEE_BRANCH2 }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Push image to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 555867651264.dkr.ecr.us-east-1.amazonaws.com
          docker build --build-arg JAR_FILE=${{ env.CALLEE_NAME }}-0.0.1-SNAPSHOT-spring-boot.jar -t ${{ env.CALLEE_NAME }} . --file dockerfile_jar
          docker tag ${{ env.CALLEE_NAME }}:${{ env.CALLEE_BRANCH2 }} 555867651264.dkr.ecr.us-east-1.amazonaws.com/devops/${{ env.CALLEE_NAME }}:${{ env.CALLEE_BRANCH2 }}
          docker push 555867651264.dkr.ecr.us-east-1.amazonaws.com/devops/${{ env.CALLEE_NAME }}:${{ env.CALLEE_BRANCH2 }}
  # Haciendo uso de https://github.com/aws-actions/amazon-ecs-deploy-task-definition
  download_task_deploy_ecs_service:
    name: Descargar task de AWS y desplegar el service
    needs: build_docker_image_target_ecr
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.CALLEE_NAME }}-${{ env.CALLEE_BRANCH2 }} --query taskDefinition > task-definition.json
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: task-definition.json
        service: ${{ env.CALLEE_NAME }}-sv-${{env.CALLEE_BRANCH2}}
        cluster: ${{ env.CALLEE_BRANCH2 }}-cluster
        wait-for-service-stability: true
      